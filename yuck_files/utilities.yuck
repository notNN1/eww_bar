;###################################################################################
; The selector displays a metric with color 'color', that is divided into 'max' segments. 
; The 'current' segment is lit up.
;
; start-at ∈ [0, 100]
; current ∈ {1, ..., max}
; max ∈ N \ {0}
; thickness ∈ [0, ∞)
;
; In the middle of the metric is a 'sign' with 'sign_color' as color
;###################################################################################

(defwidget selector_circle [start-at current max thickness sign color sign_color]
  (metric :start-at {start-at + (100 / max) * (current - 1) > 100 ? start-at + (100 / max) * (current - 1) - 100 : start-at + (100 / max) * (current - 1)}
          :value {100 / max}
          :thickness thickness
          :sign sign
          :color color
          :sign_color sign_color))

;###################################################################################
; The background control lets you set the size of the widget independent from the size of the text
;###################################################################################
(defwidget background_control [label size] 
  (overlay  :class "background_control"
    (box    :class "invisible" size)
    (box    :class "background_control_label" label)))


;###################################################################################
; The metric displays a circular progress bar in the color 'color'.
;
; start-at ∈ [0, 100]
; value ∈ [0, 100]
; thickness ∈ [0, ∞)
;
; In the middle of the circular progress bar is a 'sign' with 'sign_color' as color
;###################################################################################

(defwidget metric [start-at value thickness sign color sign_color]
  (overlay  :class "metric"
            :halign "center"
            :style {color == "" ? "" : "color: ${color}"}
    (box :class "invisible" "123")
    (overlay
      (circular-progress :class "metric_background"
      :value value
      :start-at start-at
      :thickness thickness)
      (box  :class "metric_sign"
            :style {sign_color == "" ? "" : "color: ${sign_color}"}
      "${sign}"))))



;###################################################################################
; The small_box displays a metric with value 'value' in the color 'color'.
; The 'tooltip' is displayed on hover over the box.
;
; The 'extra_style' is used to make changes to the css, 
; mainly to set the 'border-right-width: 0px' on the most right 'small_box' in a row
;
; value ∈ [0, 100]
;###################################################################################

(defwidget small_box [text tooltip value color extra_style]
  (box
      :class "small_box"    
      :style "color: ${color}; ${extra_style}"
      :tooltip tooltip
      text
      (metric :start-at 75
              :value value
              :thickness 3 
              :sign "" 
              :color "" 
              :sign_color "")))
